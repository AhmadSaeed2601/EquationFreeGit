%Simulate heterogeneous diffusion in 1D on patches as an
%example of smoothPatch1()
%AJR, Nov 2017
%!TEX root = ../equationFreeDoc.tex
%{
\subsection[\texttt{HomogenisationExample}: simulate heterogeneous diffusion in 1D \ldots]{\texttt{HomogenisationExample}: simulate heterogeneous diffusion in 1D on patches}
\label{sec:HomogenisationExample}
\localtableofcontents

\begin{figure}
\centering
\caption{\label{fig:ps1HomogenisationCtsU}field \(u(x,t)\) tests the patch scheme function applied to heterogeneous diffusion.}
\includegraphics[width=\linewidth]{Patch/ps1HomogenisationCtsU}
\end{figure}%
\autoref{fig:ps1HomogenisationCtsU} shows an example simulation in time generated by the patch scheme function applied to heterogeneous diffusion.
The inter-patch coupling is realised by fourth-order interpolation to the patch edges of the mid-patch values.

\begin{matlab}
%}
function HomogenisationExample
%{
\end{matlab}

Consider a lattice of values~\(u_i(t)\), with lattice spacing~\(dx\), and governed by the heterogeneous diffusion 
\begin{equation*}
\dot u_i=[c_{i-1/2}(u_{i-1}-u_i)+c_{i+1/2}(u_{i+1}-u_i)]/dx^2.
\end{equation*}
The macroscale, homogenised, effective diffusion should be the harmonic mean of these coefficients.
Set the desired microscale periodicity, and microscale diffusion coefficients (with subscripts shifted by a half).
\begin{matlab}
%}
mPeriod=3
cDiff=2*rand(mPeriod,1)
cHomo=1/mean(1./cDiff)
%{
\end{matlab}

Establish global data struct for heterogeneous diffusion\ solved on \(2\pi\)-periodic domain, with eight patches, each patch of half-size~\(0.1\), and the number of points in a patch being one more than an even multiple of the microscale periodicity (which \cite{Bunder2013b} showed is accurate).
Fourth order interpolation provides values for the inter-patch coupling conditions.
\begin{matlab}
%}
global patches
nPatch=8
ratio=0.2
nSubP=2*mPeriod+1
Len=2*pi;
makePatches(@heteroDiff,0,Len,nPatch,4,ratio,nSubP);
%{
\end{matlab}
Can add to the global data struct~\verb|patches| for use by the time derivative function (for example): here include the diffusivity coefficients, repeated to fill up a patch.
\begin{matlab}
%}
patches.c=repmat(cDiff,(nSubP-1)/mPeriod,1);
%{
\end{matlab}

Set an initial condition, and test evaluation of the time derivative.
\begin{matlab}
%}
u0=sin(patches.x)+0.2*randn(size(patches.x));
dudt=patchSmooth1(0,u0(:));
%{
\end{matlab}

\paragraph{Conventional integration in time}
Integrate in time using standard \script\ functions.
\begin{matlab}
%}
ts=linspace(0,2/cHomo,60);
if exist('OCTAVE_VERSION', 'builtin') % Octave version
   ucts=lsode(@(u,t) patchSmooth1(t,u),u0(:),ts);
else % Matlab version
   [ts,ucts]=ode15s(@patchSmooth1,ts([1 end]),u0(:));
end
%{
\end{matlab}

Plot the simulation.
\begin{matlab}
%}
figure(1),clf
xs=patches.x; xs([1 end],:)=nan;
surf(ts,xs(:),ucts')
xlabel('time t'),ylabel('space x'),zlabel('u(x,t)')
view(60,40)
%print('-depsc2','ps1HomogenisationCtsU')
%{
\end{matlab}

\paragraph{Use projective integration}
\begin{figure}
\centering
\caption{\label{fig:ps1HomogenisationU}field \(u(x,t)\) tests basic projective integration of the patch scheme function applied to heterogeneous diffusion.}
\includegraphics[width=\linewidth]{Patch/ps1HomogenisationU}
\end{figure}%
Now wrap around the patch time derivative function, \verb|patchSmooth1|, the projective integration function for patch simulations as illustrated by \autoref{fig:ps1HomogenisationU}.

Mark that edge of patches are not to be used in the projective extrapolation by setting initial values to \nan.
\begin{matlab}
%}
u0([1 end],:)=nan;
%{
\end{matlab}
Set the desired macro- and micro-scale time-steps over the time domain.
\begin{matlab}
%}
ts=linspace(0,3/cHomo,4)
dt=0.4*(ratio*Len/nPatch/(nSubP/2-1))^2/max(cDiff);
%{
\end{matlab}

Projectively integrate in time with: 
\textsc{dmd} projection of rank \(\verb|nPatch|+1\); 
guessed microscale time-step~\verb|dt|; and 
guessed numbers of transient and slow steps.
\begin{matlab}
%}
addpath('../ProjInt')
[us,uss,tss]=projInt1(@patchSmooth1,u0(:),ts ...
    ,nPatch+1,dt,[20 nPatch*2]);
%{
\end{matlab}
Plot the macroscale predictions to draw \autoref{fig:ps1HomogenisationU}, in groups of five in a plot.
\begin{matlab}
%}
figure(2),clf
k=length(ts); ls=nan(5,ceil(k/5)); ls(1:k)=1:k;
for k=1:size(ls,2)
  subplot(size(ls,2),1,k)
  plot(xs(:),us(:,ls(~isnan(ls(:,k)),k)),'.')
  ylabel('u(x,t)')
  legend(num2str(ts(ls(~isnan(ls(:,k)),k))',3))
end
xlabel('space x')
%print('-depsc2','ps1HomogenisationU')
%{
\end{matlab}
Also plot a surface of the microscale bursts as shown in \autoref{fig:ps1HomogenisationMicro}.
\begin{figure}
\centering
\caption{\label{fig:ps1HomogenisationMicro}stereo pair of the field \(u(x,t)\) during each of the microscale bursts used in the projective integration.}
\includegraphics[width=\linewidth]{Patch/ps1HomogenisationMicro}
\end{figure}
\begin{matlab}
%}
tss(end)=nan; %omit end time-point
figure(3),clf
for k=1:2, subplot(2,2,k)
  surf(tss,xs(:),uss,'EdgeColor','none')
  ylabel('x'),xlabel('t'),zlabel('u(x,t)')
  axis tight, view(121-4*k,45)
end
%print('-depsc2','ps1HomogenisationMicro')
%{
\end{matlab}


End the main function
\begin{matlab}
%}
end
%{
\end{matlab}





This function codes the lattice heterogeneous diffusion inside the patches.
\begin{matlab}
%}
function ut=heteroDiff(t,u,x)
global patches
dx=patches.x(2)-patches.x(1);
ut=nan(size(u));
i=2:size(u,1)-1;
ut(i,:)=diff(bsxfun(@times,patches.c,diff(u)))/dx^2 ;
end
%{
\end{matlab}

Fin.
%}
